import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.21.1'
    id 'com.gluonhq.client-gradle-plugin' version '0.1.33'
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.javatuples:javatuples:1.2'
    compile (group: 'org.controlsfx', name: 'controlsfx', version: '11.0.2') {
        exclude group: 'org.openjfx'
    }
    compile group: 'org.json', name: 'json', version: '20200518'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'
    compile 'info.picocli:picocli:4.5.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

javafx {
    version = "14"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.web' ]
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

mainClassName = "sample.Main"

jlink {
    OperatingSystem os = DefaultNativePlatform.currentOperatingSystem

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        name = 'sample.Main'
    }

    jpackage {
        outputDir = 'jpackage'
        imageName = 'CAViewer'
        skipInstaller = true
        if (os.windows) imageOptions = ['--win-console', '--icon', 'src/main/resources/icon/PulsarIcon.ico']
        else imageOptions = ['--icon', 'src/main/resources/icon/PulsarIcon.png']
        installerName = 'CAViewer'
    }
}

/*
task generateKeystore() {
    doLast {
        def dName = /CN=CAViewer, OU=CAViewer, O=CAViewer, L=Singapore, S=Singapore, C=SG/
        def keytoolCommand = /keytool -genkeypair -keyalg RSA -keysize 2048 -sigalg SHA1withRSA -dname "$dName" -validity 365 -keystore key.keystore -storepass password2020/
        println keytoolCommand

        def output = keytoolCommand.execute().toString()
        println output
    }
}

task zip() {
    doLast {
        OperatingSystem os = DefaultNativePlatform.currentOperatingSystem;
        if (os.macOsX) {
            def buildFolder = "build/jpackage/CAViewer.app"

            def command = "jar -cfM CAViewer.zip $buildFolder"
            command.execute()
        }
        else {
            def buildFolder = "build/jpackage/CAViewer"

            def command = "jar -cfM CAViewer.zip $buildFolder"
            command.execute()
        }
    }
}
*/