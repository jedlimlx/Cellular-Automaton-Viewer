package sample.model.rules;

import org.javatuples.Pair;
import sample.model.Grid;

import java.io.File;

public abstract class RuleFamily extends Rule implements Cloneable {
    protected String name;
    protected String rulestring;

    // Child class must implement
    // Loads the rulestring
    public abstract void fromRulestring(String rulestring);

    // Canonises the rulestring
    public abstract String canonise(String rulestring);

    // Sets the rulestring
    public void setRulestring(String rulestring) {
        fromRulestring(rulestring);
        this.rulestring = canonise(rulestring);
    }

    // Returns the regexes to identify the rule family
    public abstract String[] getRegex();

    // Get description of this rule family
    public abstract String getDescription();

    // Randomise rule between minimum and maximum rules
    // Throw IllegalArgumentException if the rule families are not the correct type
    public void randomise(RuleFamily minRule, RuleFamily maxRule) throws IllegalArgumentException, UnsupportedOperationException {

    }

    // Returns the minimum & maximum rule of the provided evolutionary sequence
    public Pair<RuleFamily, RuleFamily> getMinMaxRule(Grid[] grids) throws UnsupportedOperationException {
        throw new UnsupportedOperationException("Minimum and maximum rules are not supported for " +
                "this rule family");
    }

    // Between checks if the rule is in between 2 min, max rules
    public boolean betweenMinMax(RuleFamily minRule, RuleFamily maxRule) throws IllegalArgumentException,
            UnsupportedOperationException {
        throw new UnsupportedOperationException("Minimum and maximum rules are not supported for " +
                "this rule family");
    }

    // Checks if the inputted rules are valid minimum and maximum rules
    public boolean validMinMax(RuleFamily minRule, RuleFamily maxRule) {
        throw new UnsupportedOperationException("Minimum and maximum rules are not supported for " +
                "this rule family");
    }

    // Output false if not successful, true if successful
    // Generates apgtable for apgsearch to use
    // Override if you want to support apgtable generation for this rule family
    // Throw UnsupportedOperationException if apgtable generation for that specific rule is unsupported
    public boolean generateApgtable(File file) throws UnsupportedOperationException {
        throw new UnsupportedOperationException("Apgtable generation is not supported for this rule family");
    }

    // Generates comments that will be placed in the RLE
    // These comments represent additional information that is not stored in the rulestring (e.g. weights)
    // Returned array to be something like {"#R 1 2 3 2 1", "#R 2 4 6 4 2"}
    // If there isn't anything to add, just return null
    public abstract String[] generateComments();

    // Loads the RLE comments that are generated by generateComments
    public abstract void loadComments(String[] comments);

    @Override  // Clones the object
    public abstract Object clone();

    // Accessor
    public String getName() {
        return name;
    }

    public String getRulestring() {
        return rulestring;
    }

    @Override
    public String toString() {
        return getRulestring();
    }
}
