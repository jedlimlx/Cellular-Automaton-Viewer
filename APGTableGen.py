import re
import RuleParser
from CAComputeParse.R1_INT_Moore import get_trans_moore
from CAComputeParse.R2_INT_Cross import get_trans_cross
from CAComputeParse.R2_INT_FarCorners import get_trans_far
from CAComputeParse.R2_INT_Von_Neumann import get_trans_von_neumann


def gen_ot(string: str):
    all_trans = []
    for i in string.split(b","):
        trans = []
        for j in range(len(RuleParser.neighbourhood[0])):
            if j < int(i):
                trans.append(1)
            else:
                trans.append(0)

        all_trans.append(trans)

    return all_trans


def gen_apgtable(filename: str):
    if RuleParser.bs_conditions == "Range 1 Moore Isotropic Non-Totalistic":
        neighbourhood = [[(1, -1), (1, 0), (1, 1), (0, 1),
                          (-1, 1), (-1, 0), (-1, -1), (0, -1)]]
    elif RuleParser.bs_conditions == "Range 2 Cross Isotropic Non-Totalistic":
        neighbourhood = [[(2, 0), (0, 2), (-2, 0), (0, -2),
                          (1, 0), (0, 1), (-1, 0), (0, -1)]]
    elif RuleParser.bs_conditions == "Range 2 Von Neumann Isotropic Non-Totalistic":
        neighbourhood = [[(1, -1), (1, 0), (1, 1), (0, 1),
                          (-1, 1), (-1, 0), (-1, -1), (0, -1),
                          (2, 0), (0, 2), (-2, 0), (0, -2)]]
    elif RuleParser.bs_conditions == "Range 2 Far Corners Isotropic Non-Totalistic":
        neighbourhood = [[(2, -2), (1, 0), (2, 2), (0, 1),
                          (-2, 2), (-1, 0), (-2, -2), (0, -1)]]
    else:
        neighbourhood = RuleParser.neighbourhood

    apgtable_file = open(filename, "w+")
    apgtable_file.write("# This ruletable is automatically generated by CAViewer.\n\n")
    apgtable_file.write(f"n_states:{RuleParser.n_states}\n")
    apgtable_file.write(f"neighborhood:{[(0, 0)] + neighbourhood[0] + [(0, 0)]}\n")
    apgtable_file.write(f"symmetries:{'none' if RuleParser.bs_conditions != 'Outer Totalistic' else 'permute'}\n")

    if RuleParser.rulespace == "Single State":
        if "/" in RuleParser.rule_string[0]:  # Getting the birth and survival strings
            birth_string = RuleParser.rule_string[0].split("/")[1]
            survival_string = RuleParser.rule_string[0].split("/")[0]
        else:
            birth_string = re.split("[bs]", RuleParser.rule_string[0].lower())[1]
            survival_string = re.split("[bs]", RuleParser.rule_string[0].lower())[2]

        # Writing variables for death transition
        apgtable_file.write(f"\n# Variables for Death Transitions\n")
        for i in range(len(neighbourhood[0])):
            apgtable_file.write(f"var death{i} = " + "{0, 1}\n")

        if RuleParser.bs_conditions == "Range 1 Moore Isotropic Non-Totalistic":
            apgtable_file.write("\n# Birth Transitions\n")
            for trans in get_trans_moore(birth_string.encode("utf-8")):
                apgtable_file.write("0," + ",".join([str(x) for x in trans]) + ",1\n")

            apgtable_file.write("\n# Survival Transitions\n")
            for trans in get_trans_moore(survival_string.encode("utf-8")):
                apgtable_file.write("1," + ",".join([str(x) for x in trans]) + ",1\n")

        elif RuleParser.bs_conditions == "Range 2 Cross Isotropic Non-Totalistic":
            apgtable_file.write("\n# Birth Transitions\n")
            for trans in get_trans_cross(birth_string.encode("utf-8")):
                apgtable_file.write("0," + ",".join([str(x) for x in trans]) + ",1\n")

            apgtable_file.write("\n# Survival Transitions\n")
            for trans in get_trans_cross(survival_string.encode("utf-8")):
                apgtable_file.write("1," + ",".join([str(x) for x in trans]) + ",1\n")

        elif RuleParser.bs_conditions == "Range 2 Von Neumann Isotropic Non-Totalistic":
            apgtable_file.write("\n# Birth Transitions\n")
            for trans in get_trans_von_neumann(birth_string.encode("utf-8")):
                apgtable_file.write("0," + ",".join([str(x) for x in trans]) + ",1\n")

            apgtable_file.write("\n# Survival Transitions\n")
            for trans in get_trans_von_neumann(survival_string.encode("utf-8")):
                apgtable_file.write("1," + ",".join([str(x) for x in trans]) + ",1\n")

        elif RuleParser.bs_conditions == "Range 2 Far Corners Isotropic Non-Totalistic":
            apgtable_file.write("\n# Birth Transitions\n")
            for trans in get_trans_far(birth_string.encode("utf-8")):
                apgtable_file.write("0," + ",".join([str(x) for x in trans]) + ",1\n")

            apgtable_file.write("\n# Survival Transitions\n")
            for trans in get_trans_far(survival_string.encode("utf-8")):
                apgtable_file.write("1," + ",".join([str(x) for x in trans]) + ",1\n")

        elif RuleParser.bs_conditions == "Outer Totalistic":
            apgtable_file.write("\n# Birth Transitions\n")
            for trans in gen_ot(birth_string.encode("utf-8")):
                apgtable_file.write("0," + ",".join([str(x) for x in trans]) + ",1\n")

            apgtable_file.write("\n# Survival Transitions\n")
            for trans in gen_ot(survival_string.encode("utf-8")):
                apgtable_file.write("1," + ",".join([str(x) for x in trans]) + ",1\n")

        apgtable_file.write("\n# Death Transitions\n")
        apgtable_file.write(f"1,{','.join([f'death{x}' for x in range(len(neighbourhood[0]))])},0")
    elif RuleParser.rulespace == "Extended Generations":
        if "/" in RuleParser.rule_string[0]:  # Getting the birth and survival strings
            birth_string = RuleParser.rule_string[0].split("/")[1]
            survival_string = RuleParser.rule_string[0].split("/")[0]
            extended = RuleParser.rule_string[0].split("/")[2].split("-")
        else:
            birth_string = re.split("[bsd]", RuleParser.rule_string[0].lower())[1]
            survival_string = re.split("[bsd]", RuleParser.rule_string[0].lower())[2]
            extended = re.split("[bsd]", RuleParser.rule_string[0].lower())[3].split("-")

        num, alt = 1, 1
        activity = []
        inactivity = ['0']
        for i in extended:
            for j in range(num, int(i) + num):
                if alt > 0:
                    activity.append(str(j))
                else:
                    inactivity.append(str(j))
                num += 1

            alt *= -1

        # Activity Vars
        apgtable_file.write("\n# Activity Variables\n")
        for i in range(len(neighbourhood[0])):
            apgtable_file.write(f"var active{i} = {{{', '.join(activity)}}}\n")

        # Inactivity Vars
        apgtable_file.write("\n# Inactivity Variables\n")
        for i in range(len(neighbourhood[0])):
            apgtable_file.write(f"var inactive{i} = {{{', '.join(inactivity)}}}\n")

        # Decay Vars
        apgtable_file.write(f"\n# Decay Variables\n")
        for i in range(len(neighbourhood[0])):
            apgtable_file.write(f"var decay{i} = {{{', '.join([str(x) for x in range(RuleParser.n_states)])}}}\n")

        if RuleParser.bs_conditions == "Range 1 Moore Isotropic Non-Totalistic":
            apgtable_file.write("\n# Birth Transitions\n")
            for trans in get_trans_moore(birth_string.encode("utf-8")):
                string = ""
                for i in range(len(trans)):
                    if i != len(trans) - 1:
                        if trans[i] == 0: string += f"inactive{i},"
                        else: string += f"active{i},"
                    else:
                        if trans[i] == 0: string += f"inactive{i}"
                        else: string += f"active{i}"

                apgtable_file.write(f"0,{string},1\n")

            apgtable_file.write("\n# Survival Transitions\n")
            for state in activity:
                for trans in get_trans_moore(survival_string.encode("utf-8")):
                    string = ""
                    for i in range(len(trans)):
                        if i != len(trans) - 1:
                            if trans[i] == 0: string += f"inactive{i},"
                            else: string += f"active{i},"
                        else:
                            if trans[i] == 0: string += f"inactive{i}"
                            else: string += f"active{i}"

                    apgtable_file.write(f"{state},{string},{state}\n")

        elif RuleParser.bs_conditions == "Range 2 Cross Isotropic Non-Totalistic":
            apgtable_file.write("\n# Birth Transitions\n")
            for trans in get_trans_cross(birth_string.encode("utf-8")):
                string = ""
                for i in range(len(trans)):
                    if i != len(trans) - 1:
                        if trans[i] == 0:
                            string += f"inactive{i},"
                        else:
                            string += f"active{i},"
                    else:
                        if trans[i] == 0:
                            string += f"inactive{i}"
                        else:
                            string += f"active{i}"

                apgtable_file.write(f"0,{string},1\n")

            apgtable_file.write("\n# Survival Transitions\n")
            for state in activity:
                for trans in get_trans_cross(survival_string.encode("utf-8")):
                    string = ""
                    for i in range(len(trans)):
                        if i != len(trans) - 1:
                            if trans[i] == 0: string += f"inactive{i},"
                            else: string += f"active{i},"
                        else:
                            if trans[i] == 0: string += f"inactive{i}"
                            else: string += f"active{i}"

                    apgtable_file.write(f"{state},{string},{state}\n")

        elif RuleParser.bs_conditions == "Range 2 Von Neumann Isotropic Non-Totalistic":
            apgtable_file.write("\n# Birth Transitions\n")
            for trans in get_trans_von_neumann(birth_string.encode("utf-8")):
                string = ""
                for i in range(len(trans)):
                    if i != len(trans) - 1:
                        if trans[i] == 0: string += f"inactive{i},"
                        else: string += f"active{i},"
                    else:
                        if trans[i] == 0: string += f"inactive{i}"
                        else: string += f"active{i}"

                apgtable_file.write(f"0,{string},1\n")

            apgtable_file.write("\n# Survival Transitions\n")
            for state in activity:
                for trans in get_trans_von_neumann(survival_string.encode("utf-8")):
                    string = ""
                    for i in range(len(trans)):
                        if i != len(trans) - 1:
                            if trans[i] == 0: string += f"inactive{i},"
                            else: string += f"active{i},"
                        else:
                            if trans[i] == 0: string += f"inactive{i}"
                            else: string += f"active{i}"

                    apgtable_file.write(f"{state},{string},{state}\n")

        elif RuleParser.bs_conditions == "Range 2 Far Corners Isotropic Non-Totalistic":
            apgtable_file.write("\n# Birth Transitions\n")
            for trans in get_trans_far(birth_string.encode("utf-8")):
                string = ""
                for i in range(len(trans)):
                    if i != len(trans) - 1:
                        if trans[i] == 0: string += f"inactive{i},"
                        else: string += f"active{i},"
                    else:
                        if trans[i] == 0: string += f"inactive{i}"
                        else: string += f"active{i}"

                apgtable_file.write(f"0,{string},1\n")

            apgtable_file.write("\n# Survival Transitions\n")
            for state in activity:
                for trans in get_trans_far(survival_string.encode("utf-8")):
                    string = ""
                    for i in range(len(trans)):
                        if i != len(trans) - 1:
                            if trans[i] == 0: string += f"inactive{i},"
                            else: string += f"active{i},"
                        else:
                            if trans[i] == 0: string += f"inactive{i}"
                            else: string += f"active{i}"

                    apgtable_file.write(f"{state},{string},{state}\n")

        elif RuleParser.bs_conditions == "Outer Totalistic":
            apgtable_file.write("\n# Birth Transitions\n")
            for trans in gen_ot(birth_string.encode("utf-8")):
                string = ""
                for i in range(len(trans)):
                    if i != len(trans) - 1:
                        if trans[i] == 0: string += f"inactive{i},"
                        else: string += f"active{i},"
                    else:
                        if trans[i] == 0: string += f"inactive{i}"
                        else: string += f"active{i}"

                apgtable_file.write(f"0,{string},1\n")

            apgtable_file.write("\n# Survival Transitions\n")
            for state in activity:
                for trans in gen_ot(survival_string.encode("utf-8")):
                    string = ""
                    for i in range(len(trans)):
                        if i != len(trans) - 1:
                            if trans[i] == 0: string += f"inactive{i},"
                            else: string += f"active{i},"
                        else:
                            if trans[i] == 0: string += f"inactive{i}"
                            else: string += f"active{i}"

                    apgtable_file.write(f"{state},{string},{state}\n")

        apgtable_file.write("\n# Decay Transitions\n")
        for i in range(1, RuleParser.n_states):
            apgtable_file.write(f"{i},{','.join([f'decay{x}' for x in range(len(neighbourhood[0]))])},"
                                f"{(i + 1) % RuleParser.n_states}\n")

    apgtable_file.close()
